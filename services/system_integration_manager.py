"""
System Integration Manager for Enhanced Conversation System
Integrates all performance optimization and monitoring components
"""

import time
import threading
from typing import Dict, List, Any, Optional
from datetime import datetime
import logging

# Import all optimization and monitoring components
from services.performance_optimizer import get_performance_optimizer, optimize_for_render
from services.connection_pool_manager import get_connection_pool, get_query_batcher
from services.enhanced_cache_manager import get_cache_manager
from services.performance_monitor import get_performance_monitor
from services.engagement_tracker import get_engagement_tracker
from services.deployment_validator import get_deployment_validator

logger = logging.getLogger(__name__)

class SystemIntegrationManager:
    """Manages integration of all enhanced system components"""
    
    def __init__(self, api_base_url: str = None):
        self.api_base_url = api_base_url
        
        # Component references
        self.performance_optimizer = None
        self.connection_pool = None
        self.query_batcher = None
        self.cache_manager = None
        self.performance_monitor = None
        self.engagement_tracker = None
        self.deployment_validator = None
        
        # Integration status
        self.initialized = False
        self.components_status = {}
        
        # Background tasks
        self.integration_thread = None
        self.integration_enabled = False
        
        logger.info("System integration manager created")
    
    def initialize_all_components(self) -> Dict[str, Any]:
        """Initialize all system components"""
        initialization_results = {}
        
        try:\n            # Initialize performance optimizer\n            self.performance_optimizer = get_performance_optimizer()\n            initialization_results['performance_optimizer'] = {\n                'status': 'success',\n                'message': 'Performance optimizer initialized'\n            }\n            \n        except Exception as e:\n            initialization_results['performance_optimizer'] = {\n                'status': 'error',\n                'message': f'Failed to initialize performance optimizer: {e}'\n            }\n        \n        try:\n            # Initialize connection management\n            self.connection_pool = get_connection_pool()\n            self.query_batcher = get_query_batcher()\n            initialization_results['connection_management'] = {\n                'status': 'success',\n                'message': 'Connection pool and query batcher initialized'\n            }\n            \n        except Exception as e:\n            initialization_results['connection_management'] = {\n                'status': 'error',\n                'message': f'Failed to initialize connection management: {e}'\n            }\n        \n        try:\n            # Initialize cache manager\n            self.cache_manager = get_cache_manager()\n            initialization_results['cache_manager'] = {\n                'status': 'success',\n                'message': 'Cache manager initialized'\n            }\n            \n        except Exception as e:\n            initialization_results['cache_manager'] = {\n                'status': 'error',\n                'message': f'Failed to initialize cache manager: {e}'\n            }\n        \n        try:\n            # Initialize performance monitor\n            self.performance_monitor = get_performance_monitor()\n            initialization_results['performance_monitor'] = {\n                'status': 'success',\n                'message': 'Performance monitor initialized'\n            }\n            \n        except Exception as e:\n            initialization_results['performance_monitor'] = {\n                'status': 'error',\n                'message': f'Failed to initialize performance monitor: {e}'\n            }\n        \n        try:\n            # Initialize engagement tracker\n            self.engagement_tracker = get_engagement_tracker()\n            initialization_results['engagement_tracker'] = {\n                'status': 'success',\n                'message': 'Engagement tracker initialized'\n            }\n            \n        except Exception as e:\n            initialization_results['engagement_tracker'] = {\n                'status': 'error',\n                'message': f'Failed to initialize engagement tracker: {e}'\n            }\n        \n        try:\n            # Initialize deployment validator\n            self.deployment_validator = get_deployment_validator(self.api_base_url)\n            initialization_results['deployment_validator'] = {\n                'status': 'success',\n                'message': 'Deployment validator initialized'\n            }\n            \n        except Exception as e:\n            initialization_results['deployment_validator'] = {\n                'status': 'error',\n                'message': f'Failed to initialize deployment validator: {e}'\n            }\n        \n        # Check overall initialization status\n        successful_components = sum(\n            1 for result in initialization_results.values() \n            if result['status'] == 'success'\n        )\n        total_components = len(initialization_results)\n        \n        self.initialized = successful_components >= (total_components * 0.8)  # 80% success rate\n        \n        if self.initialized:\n            logger.info(f\"System integration successful: {successful_components}/{total_components} components initialized\")\n        else:\n            logger.warning(f\"System integration partial: {successful_components}/{total_components} components initialized\")\n        \n        return {\n            'initialized': self.initialized,\n            'successful_components': successful_components,\n            'total_components': total_components,\n            'component_results': initialization_results,\n            'timestamp': datetime.utcnow().isoformat()\n        }\n    \n    def start_integrated_monitoring(self):\n        \"\"\"Start integrated monitoring across all components\"\"\"\n        if not self.initialized:\n            logger.warning(\"Cannot start monitoring - system not properly initialized\")\n            return False\n        \n        if not self.integration_enabled:\n            self.integration_enabled = True\n            \n            # Start individual component monitoring\n            if self.performance_optimizer:\n                self.performance_optimizer.start_background_optimization()\n            \n            if self.performance_monitor:\n                self.performance_monitor.start_monitoring()\n            \n            if self.deployment_validator:\n                self.deployment_validator.start_continuous_monitoring()\n            \n            if self.cache_manager:\n                self.cache_manager.start_cache_warming()\n            \n            # Start integrated monitoring thread\n            self.integration_thread = threading.Thread(\n                target=self._integrated_monitoring_loop,\n                daemon=True\n            )\n            self.integration_thread.start()\n            \n            logger.info(\"Integrated monitoring started\")\n            return True\n        \n        return False\n    \n    def stop_integrated_monitoring(self):\n        \"\"\"Stop integrated monitoring\"\"\"\n        self.integration_enabled = False\n        \n        # Stop individual component monitoring\n        if self.performance_optimizer:\n            self.performance_optimizer.stop_background_optimization()\n        \n        if self.performance_monitor:\n            self.performance_monitor.stop_monitoring()\n        \n        if self.deployment_validator:\n            self.deployment_validator.stop_continuous_monitoring()\n        \n        if self.cache_manager:\n            self.cache_manager.stop_cache_warming()\n        \n        # Stop integration thread\n        if self.integration_thread:\n            self.integration_thread.join(timeout=10)\n        \n        logger.info(\"Integrated monitoring stopped\")\n    \n    def _integrated_monitoring_loop(self):\n        \"\"\"Integrated monitoring loop that coordinates all components\"\"\"\n        while self.integration_enabled:\n            try:\n                # Update component status\n                self._update_component_status()\n                \n                # Coordinate optimizations\n                self._coordinate_optimizations()\n                \n                # Check for system-wide issues\n                self._check_system_health()\n                \n                time.sleep(60)  # Run every minute\n                \n            except Exception as e:\n                logger.error(f\"Error in integrated monitoring loop: {e}\")\n                time.sleep(120)  # Wait longer on error\n    \n    def _update_component_status(self):\n        \"\"\"Update status of all components\"\"\"\n        self.components_status = {\n            'performance_optimizer': self._get_component_status(self.performance_optimizer),\n            'connection_pool': self._get_component_status(self.connection_pool),\n            'cache_manager': self._get_component_status(self.cache_manager),\n            'performance_monitor': self._get_component_status(self.performance_monitor),\n            'engagement_tracker': self._get_component_status(self.engagement_tracker),\n            'deployment_validator': self._get_component_status(self.deployment_validator)\n        }\n    \n    def _get_component_status(self, component) -> Dict[str, Any]:\n        \"\"\"Get status of a specific component\"\"\"\n        if component is None:\n            return {'status': 'not_initialized', 'healthy': False}\n        \n        try:\n            # Try to get component-specific status\n            if hasattr(component, 'get_performance_report'):\n                report = component.get_performance_report()\n                return {\n                    'status': 'active',\n                    'healthy': report.get('render_compatibility', True),\n                    'details': report\n                }\n            elif hasattr(component, 'get_pool_stats'):\n                stats = component.get_pool_stats()\n                return {\n                    'status': 'active',\n                    'healthy': stats.get('pool_utilization', 0) < 0.9,\n                    'details': stats\n                }\n            elif hasattr(component, 'get_cache_stats'):\n                stats = component.get_cache_stats()\n                return {\n                    'status': 'active',\n                    'healthy': True,\n                    'details': stats\n                }\n            else:\n                return {'status': 'active', 'healthy': True}\n                \n        except Exception as e:\n            return {\n                'status': 'error',\n                'healthy': False,\n                'error': str(e)\n            }\n    \n    def _coordinate_optimizations(self):\n        \"\"\"Coordinate optimizations across components\"\"\"\n        try:\n            # Get current system metrics\n            if self.performance_optimizer:\n                optimization_report = self.performance_optimizer.get_performance_report()\n                \n                # Apply Render-specific optimizations if needed\n                if not optimization_report.get('render_compatibility', True):\n                    logger.info(\"Applying Render compatibility optimizations\")\n                    optimize_for_render()\n            \n            # Optimize cache sizes based on usage\n            if self.cache_manager:\n                self.cache_manager.optimize_cache_sizes()\n            \n        except Exception as e:\n            logger.error(f\"Error coordinating optimizations: {e}\")\n    \n    def _check_system_health(self):\n        \"\"\"Check overall system health and trigger alerts if needed\"\"\"\n        try:\n            unhealthy_components = [\n                name for name, status in self.components_status.items()\n                if not status.get('healthy', False)\n            ]\n            \n            if unhealthy_components:\n                logger.warning(f\"Unhealthy components detected: {unhealthy_components}\")\n                \n                # Try to restart unhealthy components\n                self._attempt_component_recovery(unhealthy_components)\n            \n        except Exception as e:\n            logger.error(f\"Error checking system health: {e}\")\n    \n    def _attempt_component_recovery(self, unhealthy_components: List[str]):\n        \"\"\"Attempt to recover unhealthy components\"\"\"\n        for component_name in unhealthy_components:\n            try:\n                logger.info(f\"Attempting recovery for {component_name}\")\n                \n                # Component-specific recovery logic\n                if component_name == 'performance_optimizer' and self.performance_optimizer:\n                    # Restart background optimization\n                    self.performance_optimizer.stop_background_optimization()\n                    time.sleep(1)\n                    self.performance_optimizer.start_background_optimization()\n                \n                elif component_name == 'cache_manager' and self.cache_manager:\n                    # Clear and restart caches\n                    self.cache_manager.clear_all_caches()\n                \n                # Add more recovery logic as needed\n                \n            except Exception as e:\n                logger.error(f\"Failed to recover {component_name}: {e}\")\n    \n    def get_system_dashboard(self) -> Dict[str, Any]:\n        \"\"\"Get comprehensive system dashboard\"\"\"\n        dashboard = {\n            'system_status': {\n                'initialized': self.initialized,\n                'monitoring_enabled': self.integration_enabled,\n                'components_status': self.components_status\n            },\n            'timestamp': datetime.utcnow().isoformat()\n        }\n        \n        # Add component-specific dashboards\n        try:\n            if self.performance_monitor:\n                dashboard['performance'] = self.performance_monitor.get_performance_dashboard()\n        except Exception as e:\n            dashboard['performance'] = {'error': str(e)}\n        \n        try:\n            if self.engagement_tracker:\n                dashboard['engagement'] = self.engagement_tracker.get_engagement_analytics()\n        except Exception as e:\n            dashboard['engagement'] = {'error': str(e)}\n        \n        try:\n            if self.deployment_validator:\n                dashboard['deployment'] = self.deployment_validator.get_monitoring_dashboard()\n        except Exception as e:\n            dashboard['deployment'] = {'error': str(e)}\n        \n        try:\n            if self.performance_optimizer:\n                dashboard['optimization'] = self.performance_optimizer.get_performance_report()\n        except Exception as e:\n            dashboard['optimization'] = {'error': str(e)}\n        \n        try:\n            if self.cache_manager:\n                dashboard['caching'] = self.cache_manager.get_cache_stats()\n        except Exception as e:\n            dashboard['caching'] = {'error': str(e)}\n        \n        return dashboard\n    \n    def validate_system_deployment(self) -> Dict[str, Any]:\n        \"\"\"Validate complete system deployment\"\"\"\n        if not self.deployment_validator:\n            return {\n                'deployment_ready': False,\n                'error': 'Deployment validator not initialized'\n            }\n        \n        return self.deployment_validator.validate_deployment()\n    \n    def optimize_for_production(self) -> Dict[str, Any]:\n        \"\"\"Apply production optimizations\"\"\"\n        optimizations_applied = []\n        \n        try:\n            # Apply Render optimizations\n            render_optimization = optimize_for_render()\n            optimizations_applied.extend(render_optimization.get('optimizations_applied', []))\n            \n        except Exception as e:\n            logger.error(f\"Error applying Render optimizations: {e}\")\n        \n        try:\n            # Optimize cache configurations\n            if self.cache_manager:\n                self.cache_manager.optimize_cache_sizes()\n                optimizations_applied.append(\"Cache sizes optimized\")\n            \n        except Exception as e:\n            logger.error(f\"Error optimizing caches: {e}\")\n        \n        try:\n            # Start all monitoring systems\n            if self.start_integrated_monitoring():\n                optimizations_applied.append(\"Integrated monitoring started\")\n            \n        except Exception as e:\n            logger.error(f\"Error starting monitoring: {e}\")\n        \n        return {\n            'optimizations_applied': optimizations_applied,\n            'production_ready': len(optimizations_applied) > 0,\n            'timestamp': datetime.utcnow().isoformat()\n        }\n    \n    def get_health_summary(self) -> Dict[str, Any]:\n        \"\"\"Get overall system health summary\"\"\"\n        try:\n            if self.performance_monitor:\n                health_check = self.performance_monitor.get_health_check()\n            else:\n                health_check = {'status': 'unknown', 'issues': ['Performance monitor not available']}\n            \n            # Count healthy components\n            healthy_components = sum(\n                1 for status in self.components_status.values()\n                if status.get('healthy', False)\n            )\n            total_components = len(self.components_status)\n            \n            # Overall system health\n            if healthy_components == total_components and health_check['status'] == 'healthy':\n                overall_status = 'healthy'\n            elif healthy_components >= total_components * 0.8:\n                overall_status = 'degraded'\n            else:\n                overall_status = 'unhealthy'\n            \n            return {\n                'overall_status': overall_status,\n                'healthy_components': healthy_components,\n                'total_components': total_components,\n                'component_health_rate': healthy_components / max(total_components, 1),\n                'performance_health': health_check,\n                'system_initialized': self.initialized,\n                'monitoring_active': self.integration_enabled,\n                'timestamp': datetime.utcnow().isoformat()\n            }\n            \n        except Exception as e:\n            return {\n                'overall_status': 'error',\n                'error': str(e),\n                'timestamp': datetime.utcnow().isoformat()\n            }\n\n# Global system integration manager\n_system_integration_manager = None\n\ndef get_system_integration_manager(api_base_url: str = None) -> SystemIntegrationManager:\n    \"\"\"Get global system integration manager instance\"\"\"\n    global _system_integration_manager\n    if _system_integration_manager is None:\n        _system_integration_manager = SystemIntegrationManager(api_base_url)\n    return _system_integration_manager\n\ndef initialize_enhanced_system(api_base_url: str = None) -> Dict[str, Any]:\n    \"\"\"Initialize the complete enhanced conversation system\"\"\"\n    manager = get_system_integration_manager(api_base_url)\n    \n    # Initialize all components\n    initialization_result = manager.initialize_all_components()\n    \n    # Apply production optimizations\n    optimization_result = manager.optimize_for_production()\n    \n    return {\n        'initialization': initialization_result,\n        'optimization': optimization_result,\n        'system_ready': initialization_result['initialized'] and optimization_result['production_ready']\n    }\n