"""
Enhanced Chat API v1 Endpoints
Handles chat interactions with the enhanced conversation system
"""

from flask import Blueprint, request, jsonify
from typing import Dict, Any
from datetime import datetime

from services.enhanced_chat_service import EnhancedChatService
from services.auth_service import AuthService
from monitoring import monitor_endpoint, logger

def create_enhanced_chat_blueprint(enhanced_chat_service: EnhancedChatService, 
                                 auth_service: AuthService) -> Blueprint:
    """Create enhanced chat blueprint with service injection"""
    
    enhanced_chat_bp = Blueprint('enhanced_chat_v1', __name__)
    
    @enhanced_chat_bp.route('/message', methods=['POST', 'OPTIONS'])
    @monitor_endpoint('enhanced_chat_message')
    def send_enhanced_message():
        """Send chat message using enhanced conversation system"""
        # Handle CORS preflight request
        if request.method == 'OPTIONS':
            return '', 200
            
        try:
            # Authenticate user
            is_authenticated, user_data, error_message = auth_service.require_auth(request)
            if not is_authenticated:
                return jsonify({
                    'success': False,
                    'message': error_message
                }), 401
            
            # Get request data
            data = request.get_json()
            if not data:
                return jsonify({
                    'success': False,
                    'message': 'Request body is required'
                }), 400
            
            user_message = data.get('message', '').strip()
            if not user_message:
                return jsonify({
                    'success': False,
                    'message': 'Message cannot be empty'
                }), 400
            
            conversation_context = data.get('conversation_context', [])
            
            # Process message through enhanced chat service
            response, metadata = enhanced_chat_service.process_message(
                user_data['user_id'],
                user_message,
                conversation_context
            )
            
            return jsonify({
                'success': True,
                'message': user_message,
                'response': response,
                'metadata': {
                    # Enhanced system metadata
                    'strategy_used': metadata.get('strategy_used', 'unknown'),
                    'quality_score': metadata.get('quality_score', 0.0),
                    'processing_time_ms': metadata.get('processing_time_ms', 0),
                    'emotion_detected': metadata.get('emotion_detected', 'neutral'),
                    'conversation_type': metadata.get('conversation_type', 'general'),
                    'personalization_applied': metadata.get('personalization_applied', False),
                    'fallback_used': metadata.get('fallback_used', False),
                    'reasoning': metadata.get('reasoning', []),
                    \n                    # Legacy compatibility\n                    'mood': metadata.get('emotion_detected', 'neutral'),\n                    'language': metadata.get('language', 'en'),\n                    'used_llm': metadata.get('used_llm', False),\n                    'response_type': metadata.get('response_type', 'enhanced'),\n                    \n                    # System information\n                    'enhanced_system': metadata.get('enhanced_system', True),\n                    'system_version': '2.0'\n                }\n            }), 200\n            \n        except ValueError as e:\n            logger.warning(\"Enhanced chat message validation error\", error=e)\n            return jsonify({\n                'success': False,\n                'message': str(e)\n            }), 400\n            \n        except Exception as e:\n            logger.error(\"Enhanced chat message endpoint error\", error=e)\n            return jsonify({\n                'success': False,\n                'message': 'Internal server error',\n                'error_type': 'enhanced_system_error'\n            }), 500\n    \n    @enhanced_chat_bp.route('/history', methods=['GET', 'OPTIONS'])\n    @monitor_endpoint('enhanced_chat_history')\n    def get_enhanced_conversation_history():\n        \"\"\"Get conversation history with enhanced metadata\"\"\"\n        # Handle CORS preflight request\n        if request.method == 'OPTIONS':\n            return '', 200\n            \n        try:\n            # Authenticate user\n            is_authenticated, user_data, error_message = auth_service.require_auth(request)\n            if not is_authenticated:\n                return jsonify({\n                    'success': False,\n                    'message': error_message\n                }), 401\n            \n            # Get query parameters\n            limit = request.args.get('limit', 20, type=int)\n            limit = min(max(limit, 1), 100)  # Clamp between 1 and 100\n            \n            # Get conversation history\n            conversations = enhanced_chat_service.get_conversation_history(user_data['user_id'], limit)\n            \n            # Enhance conversation data with system insights\n            enhanced_conversations = []\n            for conv in conversations:\n                enhanced_conv = conv.copy()\n                \n                # Extract enhanced metadata if available\n                metadata = conv.get('metadata', {})\n                if isinstance(metadata, str):\n                    try:\n                        import json\n                        metadata = json.loads(metadata)\n                    except:\n                        metadata = {}\n                \n                # Add enhanced system insights\n                enhanced_conv['enhanced_metadata'] = {\n                    'strategy_used': metadata.get('strategy_used'),\n                    'quality_score': metadata.get('quality_score'),\n                    'personalization_applied': metadata.get('personalization_applied'),\n                    'emotion_detected': metadata.get('emotion_detected'),\n                    'conversation_type': metadata.get('conversation_type'),\n                    'enhanced_system': metadata.get('enhanced_system', False)\n                }\n                \n                enhanced_conversations.append(enhanced_conv)\n            \n            return jsonify({\n                'success': True,\n                'conversations': enhanced_conversations,\n                'total': len(enhanced_conversations),\n                'enhanced_system': True\n            }), 200\n            \n        except Exception as e:\n            logger.error(\"Get enhanced conversation history endpoint error\", error=e)\n            return jsonify({\n                'success': False,\n                'message': 'Internal server error'\n            }), 500\n    \n    @enhanced_chat_bp.route('/context', methods=['GET', 'OPTIONS'])\n    @monitor_endpoint('enhanced_chat_context')\n    def get_enhanced_chat_context():\n        \"\"\"Get enhanced chat context for user\"\"\"\n        # Handle CORS preflight request\n        if request.method == 'OPTIONS':\n            return '', 200\n            \n        try:\n            # Authenticate user\n            is_authenticated, user_data, error_message = auth_service.require_auth(request)\n            if not is_authenticated:\n                return jsonify({\n                    'success': False,\n                    'message': error_message\n                }), 401\n            \n            user_id = user_data['user_id']\n            \n            # Get recent conversations for context\n            recent_conversations = enhanced_chat_service.get_conversation_history(user_id, limit=5)\n            \n            # Get user profile\n            profile = auth_service.refresh_user_profile(user_id)\n            \n            # Get recent memories\n            memories = enhanced_chat_service.get_user_memories(user_id, limit=10)\n            \n            # Get enhanced system status\n            system_status = enhanced_chat_service.get_enhanced_system_status()\n            \n            return jsonify({\n                'success': True,\n                'context': {\n                    'recent_conversations': recent_conversations,\n                    'profile': profile,\n                    'recent_memories': memories,\n                    'user_id': user_id,\n                    'enhanced_system_status': system_status\n                },\n                'enhanced_system': True\n            }), 200\n            \n        except Exception as e:\n            logger.error(\"Get enhanced chat context endpoint error\", error=e)\n            return jsonify({\n                'success': False,\n                'message': 'Internal server error'\n            }), 500\n    \n    @enhanced_chat_bp.route('/stats', methods=['GET', 'OPTIONS'])\n    @monitor_endpoint('enhanced_chat_stats')\n    def get_enhanced_user_stats():\n        \"\"\"Get enhanced user statistics\"\"\"\n        # Handle CORS preflight request\n        if request.method == 'OPTIONS':\n            return '', 200\n            \n        try:\n            # Authenticate user\n            is_authenticated, user_data, error_message = auth_service.require_auth(request)\n            if not is_authenticated:\n                return jsonify({\n                    'success': False,\n                    'message': error_message\n                }), 401\n            \n            user_id = user_data['user_id']\n            \n            # Get enhanced user statistics\n            stats = enhanced_chat_service.get_user_stats(user_id)\n            \n            return jsonify({\n                'success': True,\n                'stats': stats,\n                'enhanced_system': True\n            }), 200\n            \n        except Exception as e:\n            logger.error(\"Get enhanced user stats endpoint error\", error=e)\n            return jsonify({\n                'success': False,\n                'message': 'Internal server error'\n            }), 500\n    \n    @enhanced_chat_bp.route('/system/status', methods=['GET', 'OPTIONS'])\n    @monitor_endpoint('enhanced_system_status')\n    def get_system_status():\n        \"\"\"Get enhanced conversation system status\"\"\"\n        # Handle CORS preflight request\n        if request.method == 'OPTIONS':\n            return '', 200\n            \n        try:\n            # Get system status (no auth required for system status)\n            system_status = enhanced_chat_service.get_enhanced_system_status()\n            \n            return jsonify({\n                'success': True,\n                'system_status': system_status,\n                'timestamp': datetime.utcnow().isoformat()\n            }), 200\n            \n        except Exception as e:\n            logger.error(\"Get system status endpoint error\", error=e)\n            return jsonify({\n                'success': False,\n                'message': 'Internal server error'\n            }), 500\n    \n    @enhanced_chat_bp.route('/system/metrics', methods=['GET', 'OPTIONS'])\n    @monitor_endpoint('enhanced_system_metrics')\n    def get_system_metrics():\n        \"\"\"Get enhanced conversation system metrics\"\"\"\n        # Handle CORS preflight request\n        if request.method == 'OPTIONS':\n            return '', 200\n            \n        try:\n            # Get conversation statistics\n            stats = enhanced_chat_service.enhanced_chatbot.get_conversation_statistics()\n            \n            return jsonify({\n                'success': True,\n                'metrics': {\n                    'total_conversations': stats.get('total_conversations', 0),\n                    'average_response_time_ms': stats.get('average_response_time', 0),\n                    'average_quality_score': stats.get('average_quality_score', 0),\n                    'strategy_distribution': stats.get('strategy_usage', {}),\n                    'fallback_usage_percentage': stats.get('fallback_usage_percentage', 0)\n                },\n                'timestamp': datetime.utcnow().isoformat()\n            }), 200\n            \n        except Exception as e:\n            logger.error(\"Get system metrics endpoint error\", error=e)\n            return jsonify({\n                'success': False,\n                'message': 'Internal server error'\n            }), 500\n    \n    return enhanced_chat_bp\n\n# Compatibility function for gradual migration\ndef create_hybrid_chat_blueprint(chat_service, enhanced_chat_service, auth_service) -> Blueprint:\n    \"\"\"Create hybrid chat blueprint that can use both systems\"\"\"\n    \n    hybrid_chat_bp = Blueprint('hybrid_chat_v1', __name__)\n    \n    @hybrid_chat_bp.route('/message', methods=['POST', 'OPTIONS'])\n    @monitor_endpoint('hybrid_chat_message')\n    def send_hybrid_message():\n        \"\"\"Send chat message with automatic system selection\"\"\"\n        # Handle CORS preflight request\n        if request.method == 'OPTIONS':\n            return '', 200\n            \n        try:\n            # Authenticate user\n            is_authenticated, user_data, error_message = auth_service.require_auth(request)\n            if not is_authenticated:\n                return jsonify({\n                    'success': False,\n                    'message': error_message\n                }), 401\n            \n            # Get request data\n            data = request.get_json()\n            if not data:\n                return jsonify({\n                    'success': False,\n                    'message': 'Request body is required'\n                }), 400\n            \n            user_message = data.get('message', '').strip()\n            if not user_message:\n                return jsonify({\n                    'success': False,\n                    'message': 'Message cannot be empty'\n                }), 400\n            \n            conversation_context = data.get('conversation_context', [])\n            use_enhanced = data.get('use_enhanced_system', True)  # Default to enhanced\n            \n            # Choose system based on request or fallback logic\n            if use_enhanced:\n                try:\n                    # Try enhanced system first\n                    response, metadata = enhanced_chat_service.process_message(\n                        user_data['user_id'],\n                        user_message,\n                        conversation_context\n                    )\n                    metadata['system_used'] = 'enhanced'\n                    \n                except Exception as e:\n                    logger.warning(f\"Enhanced system failed, falling back to legacy: {e}\")\n                    # Fallback to legacy system\n                    response, metadata = chat_service.process_message(\n                        user_data['user_id'],\n                        user_message,\n                        conversation_context\n                    )\n                    metadata['system_used'] = 'legacy_fallback'\n                    metadata['enhanced_system_error'] = str(e)\n            else:\n                # Use legacy system\n                response, metadata = chat_service.process_message(\n                    user_data['user_id'],\n                    user_message,\n                    conversation_context\n                )\n                metadata['system_used'] = 'legacy'\n            \n            return jsonify({\n                'success': True,\n                'message': user_message,\n                'response': response,\n                'metadata': metadata\n            }), 200\n            \n        except Exception as e:\n            logger.error(\"Hybrid chat message endpoint error\", error=e)\n            return jsonify({\n                'success': False,\n                'message': 'Internal server error'\n            }), 500\n    \n    return hybrid_chat_bp\n